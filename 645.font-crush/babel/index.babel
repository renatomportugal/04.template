
ko.bindingHandlers.fontCrush={
	init( element, valueAccessor, ab, viewModel ){
		//let crush=new FontCrush( element, valueAccessor() || {});
		viewModel.initFontCrush( element, valueAccessor() || {} );
	}
};

function FontCrushViewModel(){
	this.crush=new FontCrush('#font-crush', {});
	this.scoreDisplay=ko.pureComputed(()=>{
		let crush=this.crush,
				score=crush ? crush.score() : 0,
				str=''+score;
		if( str.length<= 3 ) return str;
		let arr=(str).split(''),
				off=arr.length % 3,
				range=_.range( off || 3, arr.length, 3 );
		range.forEach(( i,c )=> arr.splice( i+c, 0, ','));
		return arr.join('');
	});
}

function FontCrush( element, options ){
	var self=this;
  let params=Object.assign({}, FontCrush.defaults, options || {});
	let locals={
		lefts: [],// array of integers representing column offsets
		tops: [],// array of integers representing row offsets
		selectedPiece: null,
		gravity: ko.observable( 'down' ),
		savedMatches: [],
		currentMatches:[],
		score: ko.observable(0)
	}
	let utils={
		bindDrag( unbind=false ){ //console.log( 'bindDrag', 'unbind?', unbind );
			if( self.demoing()){
				return unbind ? false : utils.moveDemo();
			}
			utils.getPieceMap().forEach( o =>{
				let piece=$(o.piece),
					start={};
				piece.unbind( 'mousedown' );
				if( unbind===true ) return false;
				piece.bind('mousedown', e=>{
					start.x=e.clientX;
					start.y=e.clientY;
					let clone=utils.createClone( piece );
					$(window).bind('mousemove.facrush', me=>{
						let [x, y]=[ me.clientX, me.clientY ],
								{ top, left }=piece.position();
						clone.css({	left:left - ( start.x - x ), top: top - ( start.y - y )});
					}).bind('mouseup.facrush', me=>{
						$(window).unbind('mouseup.facrush').unbind('mousemove.facrush');
						clone.remove();
						let[ x, y ]=[ me.clientX, me.clientY ],
								[ offsetX, offsetY ]=[ start.x - x, start.y - y ],
								[ absX, absY ]=[ Math.abs( offsetX ), Math.abs( offsetY )];
						if( absX < 5 && absY < 5 ){
							utils.selectPiece( o );
						} else {// piece was dragged far enough
							let { row, column }=o,
									[ targetRow, targetColumn ]=[ row, column ];
							if( absX > absY ){// left/right
								targetColumn=column + ( start.x >  x ? -1 : 1);
							} else {
								targetRow=row + ( start.y > y ? -1 : 1 );
							}
							let targetObject=_.find( utils.getPieceMap(), o=> o.row===targetRow && o.column===targetColumn );
							if( targetObject ){
								utils.trySwap( o, targetObject );
							}
							//else console.log( 'CANNOT FIND TARGET PIECE' );
						}
					})
				});
			});
		},
		clearBoard(){
			$( params.selectors.piece ).stop().remove();	
			self.message(null);
		},
		createPiece( name="plane", color="black"){
			let piece=$('<div/>').width( params.piece ).height( params.piece )
					.addClass( params.selectors.piece.slice(1))
					.data({name, color});
			piece.append(`<i class="fa fa-${name}" style="color: ${color}"></i>`);
			return piece;
		},
		createDropMap( matches, pieceMap ){// transition between downward falling pieces and all direction moving
			let gravity=locals.gravity(),
					isRowChange=[ 'down', 'up' ].indexOf( gravity ) >= 0,
					isColumnChange=[ 'right', 'left' ].indexOf( gravity )>= 0,
					changeArr=_.range( params[ isRowChange ? 'columns' : 'rows'] ).map( i=>0 ),
					dropMap=new Map,// a piece=>counter determining how many squares to drop
					pieceFilter={
						down( o, opt ){
							return opt.column===o.column && opt.row < o.row;
						},
						up( o, opt ){
							return opt.column===o.column && opt.row > o.row;
						},
						right(o, opt ){
							return opt.row===o.row && opt.column < o.column;
						},
						left( o, opt ){
							return opt.row===o.row && opt.column > o.column;
						}
					};
			matches.forEach( arr=>{// array of match objects
				arr.forEach( o=>{// { row, column, piece, value } object
					changeArr[ isRowChange ? o.column  : o.row ] += 1;
					pieceMap.filter( opt=> pieceFilter[ gravity ]( o, opt )).forEach( opt =>{
						dropMap.set( opt, 1 + ( dropMap.get(opt) || 0))
					});
				});
			});
			changeArr.forEach(( count, majorIndex )=>{
				let css={ left: -params.piece, top: -params.piece };
				if( isRowChange ){
					css={
						left: locals.lefts[ majorIndex ], 
						top: gravity==='down' ? -params.piece : ( 1 + params.rows ) * params.piece };
				}	else {
					css={ 
						top: locals.tops[ majorIndex ],
						left: gravity==='left' ? ( 1 + params.columns ) *  params.piece : -params.piece }
				}
				_.range( count ).map( utils.randomPiece ).forEach(( piece, minorIndex ) =>{
					let row=isColumnChange ? minorIndex : gravity==='down' ? -1 : params.rows,
							column=isRowChange ? minorIndex : gravity==='right' ? -1 : params.columns,
							o={ piece, row: row, column: column, value: utils.getValue( piece )};
					//console.log( 'piece appended', 'row', row, 'column', column )
					piece.appendTo( self.board ).css( css );
					dropMap.set( o, count-minorIndex );// add newly created pieces to the map
				});
			});			
			return dropMap;
			
		},
		createClone( piece ){
			let [ name, color ]=[ piece.data('name'), piece.data('color' )];
			return utils.createPiece( name, color )
				.appendTo( self.board )
				.css( piece.position() )
				.addClass( params.selectors.clone.slice(1));
		},
		dropInitial(){
			let dropMap=utils.getInitialDropMap();
			utils.dropPieces( dropMap );
		},
		dropPieces( dropMap ){
			let animations=[], gravity=locals.gravity();
			dropMap.forEach(( count, o )=>{
				let css={},
						isRowChange=[ 'up', 'down' ].indexOf( gravity ) >= 0,
						modifiedCount=count * ([ 'up', 'left'].indexOf( gravity ) >= 0 ? -1 : 1);
				if( isRowChange ) css.top=locals.tops[ o.row + modifiedCount ];
				else css.left=locals.lefts[ o.column + modifiedCount ];
				console.log( 'animate to', css );
				let promise=new Promise((resolve, reject )=>{
					setTimeout(()=>{
						o.piece.animate( css, 75 * count, resolve );
					}, 55 * (params[ isRowChange ? 'rows' : 'columns' ] - count ) );
				});
				animations.push( promise );
			});
			Promise.all( animations ).then(()=>utils.testForMatches());
			
		},
		getInitialDropMap(){
			let dropMap=new Map();
			_.range( params.rows ).forEach( row =>{
				_.range( params.columns ).forEach( column=>{
					let left=locals.lefts[ column ],
						piece=utils.randomPiece().appendTo( self.board ).css({left, top: -params.piece }),
						o={ piece, row: 0, column, value: utils.getValue( piece )};
					dropMap.set( o, params.rows - row - 1 );
				})
			});	
			return dropMap;
		},
		getMatches( pieceMap ){
			pieceMap= pieceMap || utils.getPieceMap();
			let [ ret, usedRight, usedDown ]=[ [], new Set, new Set];
			pieceMap.forEach( o=>{
				let { piece, value, row, column }=o;
				let rightMatch=[ o ], downMatch=[ o ];
				let rightNeighbor=_.first( pieceMap.filter( opt=> opt.row===row && opt.column===column+1 )),
						bottomNeighbor=_.first( pieceMap.filter( opt=> opt.column===column && opt.row===row+1 ));
				if( !usedRight.has(o)){
					while( rightNeighbor && rightNeighbor.value===value ){
						rightMatch.push( rightNeighbor );
						rightNeighbor=_.find( pieceMap, opt=> opt.row===row && opt.column===rightNeighbor.column + 1)
					}
					if( rightMatch.length >= params.match ){
						rightMatch.forEach( n=> usedRight.add(n));
						ret.push( rightMatch );
					}
				}
				if( !usedDown.has(o)){
					while( bottomNeighbor && bottomNeighbor.value===value ){
						downMatch.push( bottomNeighbor );
						bottomNeighbor=_.first( pieceMap.filter( opt=> opt.row===bottomNeighbor.row + 1 && opt.column===column))
					}
					if( downMatch.length >= params.match ){ 
						downMatch.forEach( n=> usedDown.add(n));
						ret.push( downMatch );
					}
				}
			});
			let rightMatches=ret.filter( arr=> _.first( arr ).row===_.last( arr ).row ),
					downMatches=ret.filter( arr=> _.first( arr ).column===_.last( arr ).column ),
					downSlice=new Set;
			rightMatches.forEach( matchArr=>{// check for cross membership
				downMatches.forEach( subArr=>{
					let cross=_.intersection( matchArr, subArr );
					if( cross.length ){
						let extras=_.without( subArr, cross[0] );
						matchArr.push(...extras );
						downSlice.add( subArr );
					}
				});
			});			
			return ret.filter( arr=> !downSlice.has( arr ));
		},
		getNeighbors(o, pieceMap){
			return pieceMap.filter( n=> utils.isNeighbor( o, n ));
		},
		getPieces(){
			return $( params.selectors.piece ).get();	
		},
		getPotentialMatches(pieceMap){// test to see if any plays can be made
			pieceMap=pieceMap || utils.getPieceMap();
			let swaps=[];// araay of possible piece maps
			pieceMap.forEach(( o, index )=>{
				let indexes=pieceMap.filter( n=> utils.isNeighbor( o, n )).map( n=> pieceMap.indexOf( n ));
				indexes.forEach( i=>{
					let tempPieceMap=pieceMap.slice(),
							n=pieceMap[i],
							swapee=Object.assign({}, n,{ row: o.row, column: o.column }),
							swapper=Object.assign({}, o, { row: n.row, column: n.column })
					tempPieceMap.splice( index, 1, swapee );
					tempPieceMap.splice( i, 1, swapper );
					if( utils.getMatches( tempPieceMap ).length ){
						swaps.push( [ o, n ] );
					}
				});
			});
			//console.log( 'swaps', swaps.length, swaps );
			return swaps;
		},
		getData(piece){ 
			piece=$(piece);
			let pos=piece.position(),
					column=locals.lefts.indexOf( Math.round( pos.left ) ),
					value=utils.getValue( piece ),
					row=locals.tops.indexOf( Math.round( pos.top ) );
			return { piece, value, row, column };			
		},
		getValue(piece){
			return piece ? piece.data('name') : undefined;
		},
		getPieceMap(){
			let pieceMap=utils.getPieces().map( utils.getData );
			pieceMap.sort((a,b)=>{
				if( a.row < b.row ) return -1;
				if( a.row > b.row ) return 1;
				return a.column < b.column ? -1 : 1;
			});
			return pieceMap;
		},
		isNeighbor( o, n ){
			return utils.isBottomNeighbor( o, n ) || utils.isRightNeighbor( o, n );
		},
		isBottomNeighbor( o, n ){
			return n.row===o.row + 1 && n.column===o.column;
		},
		isRightNeighbor( o, n ){
			return n.row===o.row && n.column===o.column + 1;
		},
		modifyMatches( matches ){// add/remove pieces from matches
			
		},
		moveDemo(){// swap two pieces for the demo
			let swaps=utils.getPotentialMatches();
			if( !swaps.length ) console.error( 'WTF? Match not found in the demo...');
			let [ o, n ]=_.shuffle( swaps ).pop();
			_.delay(()=>utils.trySwap( o, n ), 750 );
		},
		pieceFilter:{// returns true if piece will move - gravity based
			down( o, opt ){
				return opt.column===o.column && opt.row < o.row;
			},
			up( o, opt ){
				return opt.column===o.column && opt.row > o.row;
			},
			right(o, opt ){
				return opt.row===o.row && opt.column < o.column;
			},
			left( o, opt ){
				return opt.row===o.row && opt.column > o.column;
			}
		},
		randomPiece(){
			let o=params.fonts[ Math.floor( Math.random() * params.fonts.length )];
			return utils.createPiece(o.name, o.color );
		},
		randomGravity(){
			let dirs=['up', 'down', 'right', 'left' ];
			return dirs[ Math.floor( Math.random() * dirs.length )];
		},
		resizeBoard(){
			let width=params.gutter *( 1 + params.columns ) +( params.columns * params.piece ),
					height=params.gutter * ( 1 + params.rows ) + ( params.rows * params.piece );
			self.board.width(width).height( height );
			self.height(height);
			self.width(width);

		},
		removeMatches( matches ){
			utils.modifyMatches( matches );
			utils.scoreMatches( matches );
			let removers=$();
			matches.forEach( arr=> arr.forEach( o => removers=removers.add( o.piece )));
			return new Promise((resolve, reject )=>{
				removers.fadeOut( 250, function(){
					$(this).remove();
					resolve();
				});
			});
		},
		replenishPieces(matches){
			/* mathces have been removed, add pieces and move */
			let pieceMap=utils.getPieceMap(),
					dropMap=utils.createDropMap( matches, pieceMap );
			utils.dropPieces( dropMap );
		},
		resetGame(){
			locals.lefts=_.range( params.columns ).map( i=> params.gutter + (params.gutter + params.piece ) * i);
			locals.tops=_.range( params.rows ).map( i=> params.gutter + ( params.gutter + params.piece ) * i );
			locals.gravity('down');
			//locals.rows=_.range( params.rows ).map( i=> _.range( params.columns ).map( j=>utils.randomPiece()));
			locals.selectedPiece=null;
			locals.score(0);
			
		},
		saveMatches( matches, dragged ){
			if( dragged )	locals.savedMatches.push( locals.currentMatches=[]);
			locals.currentMatches.push( matches );
		},
		scoreMatches( matches ){
			let score=0,
					modifier=locals.currentMatches.length + matches.length;
			matches.forEach( match=> score += modifier * Math.pow( 10 * match.length, 3  ));
			utils.updateScore( score );				
		},
		selectPiece(o){
			let n=locals.selectedPiece;
			utils.unselectPieces();
			if( n ){
				if( utils.isNeighbor( o, n ) || utils.isNeighbor( n, o )){
					utils.trySwap( n, o );
					locals.selectedPiece=null;
				}
				else{
					locals.selectedPiece=null;
					utils.selectPiece(o);
				}
			} else {
				locals.selectedPiece=o;
				o.piece.addClass( params.selectors.active.slice(1));
			}
		},
		shufflePieces(pieceMap){
			pieceMap=_.shuffle( pieceMap || utils.getPieceMap() );
			_.range( params.rows ).forEach( i=>{
				_.range( params.columns ).forEach( j=>{
					let o=pieceMap[ params.columns * i + j ];
					o.row=i;
					o.column=j;
				});
			});
			if( utils.getMatches( pieceMap ).length && pieceMap.filter( arr=>arr.length>params.match ).length===0 ){
				return Promise.all( pieceMap.map( o=>{
					return new Promise((resolve, reject )=>{
						let [ left, top ]=[ locals.lefts[ o.column ], locals.tops[ o.row ]];
						o.piece.animate({top,left}, 750, resolve );
					})
				})
				)
			} else {
				return utils.shufflePieces( pieceMap );
			}
		},
		startDemo(){// when no one is playing
			utils.startGame( true );
		},
		startGame( demo ){
			self[ demo===true ? 'demoing' : 'playing' ]( true );
			self[ demo===true ? 'playing' : 'demoing' ]( false );
			utils.resetGame();
			utils.resizeBoard();
			utils.clearBoard();
			_.delay( utils.dropInitial, 1 );
			//utils.dropInitial();
			//utils.dropPieces( true ).then(()=>utils.testForMatches() );
		},
		stopGame(){// wuit
			self.playing( false );
			utils.clearBoard();
			utils.unbindDrag();
		},
		swapPieces( o, targetObject ){
			let animations=[];
				let pos=targetObject.piece.position();
				animations.push( 
					new Promise((resolve,reject)=>{
						targetObject.piece.animate( o.piece.position(), 200, resolve )
					}),
					new Promise((resolve,reject)=>{
						o.piece.animate( pos, 200, resolve );
					}))
			return Promise.all( animations );
		},
		testForMatches( dragged=false ){// all pieces are in place and ready to be checked
			let matches=utils.getMatches();
			//console.log( 'matches', matches );
			if( matches.length ){
				utils.saveMatches( matches, dragged );
				utils.removeMatches( matches ).then(()=> utils.replenishPieces(matches));
				if( dragged )	return true;
			}
			else {
				if( dragged ){// attempted to drag but did not create a match
					return false;
				} 
				else {// not dragged, added pieces caused new matches
					if( !utils.getPotentialMatches().length ){
						self.message('SHUFFLING PIECES...');
						_.delay(()=>	utils.shufflePieces().then(()=>{
							self.message(null);
							utils.testForMatches();
						}), 750);
					}
					else{
						locals.gravity( utils.randomGravity());
						utils.bindDrag();
					}
				}
			}
		},
		trySwap( o, n ){
				utils.unbindDrag();
				utils.swapPieces( o, n ).then(()=>{
					if( !utils.testForMatches( true )){
						utils.swapPieces( n, o ).then(utils.bindDrag);
					}
				});
		},
		unbindDrag(){
			return utils.bindDrag( true );
		},
		unselectPieces(){
			$(params.selectors.active).removeClass( params.selectors.active.slice(1));
		},
		updateScore( amt ){
			locals.score( locals.score() + amt );
		}
	};            
	Object.assign( self, {//public methods
		board: $(element),
		playing: ko.observable( false ),
		demoing: ko.observable( false ),
		message: ko.observable(''),
		score: ko.pureComputed(()=> locals.score()),
		width: ko.observable(0),
		height: ko.observable(0),// board height
		gravity: ko.pureComputed({
			read(){
				return locals.gravity();
			}
		}),
		startStop(){
			utils[ self.playing() ? 'stopGame' : 'startGame']();
		},
		startGame(){
			if( !self.playing()) utils.startGame();
		},
		stopGame(){
			if( self.playing()) utils.stopGame();
		}
	});
	utils.resizeBoard();
	//utils.startDemo();
}

FontCrush.defaults={
	rows: 8,
	columns: 12,
	match: 3,
	piece: 44,
	gutter: 2,
	selectors:{
		piece: '.font-crush-piece',
		clone: '.font-crush-clone',
		active: '.font-crush-active'
	},
	fonts: [
		{ name: 'phone', color: 'blue' },
		//{ name: 'soccer-ball-o', color: 'purple'},
		{ name: 'taxi', color: 'goldenrod'},
		{ name: 'star', color: 'red'},
		{ name: 'gift', color: 'green'},
		{ name: 'shield', color: 'silver'},
		{ name: 'heart', color: 'pink'},
	],
	special:[
		{ name:"striped", color: true }
	]
}

ko.applyBindings( new FontCrushViewModel )